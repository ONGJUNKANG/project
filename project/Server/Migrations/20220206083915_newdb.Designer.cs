// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project.Server.Data;

namespace project.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220206083915_newdb")]
    partial class newdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            ConcurrencyStamp = "a8d5af15-70b2-4228-82c7-7ca6d4dac719",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            ConcurrencyStamp = "5e96405d-47c7-4f82-9ec1-5806053caad8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("project.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "532ba015-b055-4346-9582-db83fcd7826f",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEL7Q6s5GQrW9EM3oNrfdL6VBtTfWJaSKZWwjUBXCPWhxCGVSBEJGEY8vmjLVAX8bzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6c7f3a2-d4c1-4edc-aa88-e543782ff14f",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("project.Shared.Domain.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Card");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardType = "debit cards",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CardType = "credit cards",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("project.Shared.Domain.FlightBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Departing")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<int?>("FlightsId")
                        .HasColumnType("int");

                    b.Property<int?>("GoingToId")
                        .HasColumnType("int");

                    b.Property<int>("Passenger")
                        .HasColumnType("int");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Returning")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlightsId");

                    b.HasIndex("GoingToId");

                    b.HasIndex("PriceId");

                    b.ToTable("FlightBooking");
                });

            modelBuilder.Entity("project.Shared.Domain.Flights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoingTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 290, DateTimeKind.Local).AddTicks(9387),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 290, DateTimeKind.Local).AddTicks(9394),
                            GoingTo = "Japan",
                            Price = 780.0,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 290, DateTimeKind.Local).AddTicks(9398),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 290, DateTimeKind.Local).AddTicks(9399),
                            GoingTo = "USA",
                            Price = 1780.0,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 290, DateTimeKind.Local).AddTicks(9400),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 290, DateTimeKind.Local).AddTicks(9401),
                            GoingTo = "China",
                            Price = 580.0,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("project.Shared.Domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Seat")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfVehicles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 288, DateTimeKind.Local).AddTicks(5338),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(4443),
                            Name = "Mitsubishi Mirage",
                            Price = 40.0,
                            Seat = 4,
                            TypeOfVehicles = "Economy Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5321),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5326),
                            Name = "Nissan Versa",
                            Price = 60.0,
                            Seat = 5,
                            TypeOfVehicles = "Compact Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5330),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5331),
                            Name = "Toyota Corolla",
                            Price = 75.0,
                            Seat = 5,
                            TypeOfVehicles = "MidSize Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5332),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5333),
                            Name = "Volkswagen Jetta",
                            Price = 80.0,
                            Seat = 5,
                            TypeOfVehicles = "Standard Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5334),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5335),
                            Name = "Chevy Malibu",
                            Price = 85.0,
                            Seat = 5,
                            TypeOfVehicles = "Full Size Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5337),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5338),
                            Name = "Ford Mustang Convertible",
                            Price = 90.0,
                            Seat = 4,
                            TypeOfVehicles = "Convertible Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5339),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5340),
                            Name = "Dodge Challenger",
                            Price = 120.0,
                            Seat = 4,
                            TypeOfVehicles = "Sporty Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5342),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5343),
                            Name = "INFINITI Q50",
                            Price = 150.0,
                            Seat = 5,
                            TypeOfVehicles = "Full Size Elite Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5344),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5345),
                            Name = " Audi A5 Sportback",
                            Price = 180.0,
                            Seat = 5,
                            TypeOfVehicles = "Full Size Elite Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5347),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5348),
                            Name = "BMW 228i Gran Coupe",
                            Price = 180.0,
                            Seat = 5,
                            TypeOfVehicles = "Standard Elite Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5349),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5350),
                            Name = "Tesla Model S",
                            Price = 180.0,
                            Seat = 5,
                            TypeOfVehicles = "Luxury Elite Electric Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5352),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5353),
                            Name = "Chevrolet Impala",
                            Price = 180.0,
                            Seat = 5,
                            TypeOfVehicles = "Premium Special Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5354),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5355),
                            Name = "BMW 5 Series ",
                            Price = 180.0,
                            Seat = 5,
                            TypeOfVehicles = "Premium Elite Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5356),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5357),
                            Name = "Nissan Maxima ",
                            Price = 180.0,
                            Seat = 5,
                            TypeOfVehicles = "Premium Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5359),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5360),
                            Name = "Chrysler 300",
                            Price = 190.0,
                            Seat = 5,
                            TypeOfVehicles = "Luxury Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5361),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5362),
                            Name = "Maserati Ghibli",
                            Price = 190.0,
                            Seat = 5,
                            TypeOfVehicles = "Executive Luxury Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5363),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5364),
                            Name = "Mercedes AMG E53",
                            Price = 200.0,
                            Seat = 5,
                            TypeOfVehicles = "Executive Luxury Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5366),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5367),
                            Name = "BMW 7 Series",
                            Price = 250.0,
                            Seat = 5,
                            TypeOfVehicles = "Large Executive Luxury Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5368),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5369),
                            Name = "Mercedes Benz S Class",
                            Price = 250.0,
                            Seat = 5,
                            TypeOfVehicles = "Large Executive Luxury Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5371),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5372),
                            Name = "Porsche Panamera",
                            Price = 250.0,
                            Seat = 5,
                            TypeOfVehicles = "Large Executive Luxury Car",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5373),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5374),
                            Name = "Nissan Kicks",
                            Price = 120.0,
                            Seat = 5,
                            TypeOfVehicles = "Compact SUV",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5376),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5376),
                            Name = "Nissan Rogue",
                            Price = 150.0,
                            Seat = 5,
                            TypeOfVehicles = "MidSize SUV",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5378),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5379),
                            Name = "Ford Edge ",
                            Price = 180.0,
                            Seat = 5,
                            TypeOfVehicles = "Standard SUV",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5380),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5381),
                            Name = "Chevrolet Tahoe ",
                            Price = 200.0,
                            Seat = 7,
                            TypeOfVehicles = "Full Size SUV",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 25,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5382),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5383),
                            Name = "Infiniti QX80",
                            Price = 250.0,
                            Seat = 7,
                            TypeOfVehicles = "Luxury SUV",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 26,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5385),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5386),
                            Name = "Cadillac XT4",
                            Price = 180.0,
                            Seat = 5,
                            TypeOfVehicles = "Standard Elite SUV",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 27,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5387),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5388),
                            Name = "Volkswagen Atlas",
                            Price = 180.0,
                            Seat = 7,
                            TypeOfVehicles = "Premium Crossover",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 28,
                            Capacity = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5389),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5390),
                            Name = "Mercedes Benz GLE",
                            Price = 220.0,
                            Seat = 5,
                            TypeOfVehicles = "Luxury Elite SUV",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 29,
                            Capacity = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5392),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5393),
                            Name = "Chevy Suburban",
                            Price = 220.0,
                            Seat = 8,
                            TypeOfVehicles = "Premium SUV",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 30,
                            Capacity = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5394),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5395),
                            Name = "BMW X3 ",
                            Price = 250.0,
                            Seat = 5,
                            TypeOfVehicles = "Premium Elite SUV",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 31,
                            Capacity = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5396),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5397),
                            Name = "Chrysler Pacifica ",
                            Price = 200.0,
                            Seat = 7,
                            TypeOfVehicles = "7 Passenger Minivan",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 32,
                            Capacity = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5479),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5480),
                            Name = "Toyota Sienna",
                            Price = 220.0,
                            Seat = 8,
                            TypeOfVehicles = "8 Passenger Minivan",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 33,
                            Capacity = 12,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5482),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5483),
                            Name = "Ford Transit Wagon",
                            Price = 230.0,
                            Seat = 12,
                            TypeOfVehicles = "12 Passenger Van",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 34,
                            Capacity = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5484),
                            DateUpdated = new DateTime(2022, 2, 6, 16, 39, 15, 289, DateTimeKind.Local).AddTicks(5485),
                            Name = "Ford Transit Wagon",
                            Price = 250.0,
                            Seat = 15,
                            TypeOfVehicles = "15 Passenger Van",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("project.Shared.Domain.VehicleBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Passenger")
                        .HasColumnType("int");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfVehicleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("luggage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.HasIndex("TypeOfVehicleId");

                    b.ToTable("VehicleBooking");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("project.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("project.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("project.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("project.Shared.Domain.FlightBooking", b =>
                {
                    b.HasOne("project.Shared.Domain.Flights", "Flights")
                        .WithMany()
                        .HasForeignKey("FlightsId");

                    b.HasOne("project.Shared.Domain.Flights", "GoingTo")
                        .WithMany()
                        .HasForeignKey("GoingToId");

                    b.HasOne("project.Shared.Domain.Flights", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId");

                    b.Navigation("Flights");

                    b.Navigation("GoingTo");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("project.Shared.Domain.VehicleBooking", b =>
                {
                    b.HasOne("project.Shared.Domain.Vehicle", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId");

                    b.HasOne("project.Shared.Domain.Vehicle", "TypeOfVehicle")
                        .WithMany()
                        .HasForeignKey("TypeOfVehicleId");

                    b.Navigation("Price");

                    b.Navigation("TypeOfVehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
